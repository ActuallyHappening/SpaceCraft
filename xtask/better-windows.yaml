runs-on: windows-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
      BUILD_INSTALLER: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install dotnet
        if: ${{ env.BUILD_INSTALLER }}
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: build/windows/installer/global.json
      - name: Build release
        run: |
          cargo build --release
      - name: Prepare release
        run: |
          mkdir target/release/assets && cp -r assets target/release/assets
          mkdir target/release/credits && cp -r credits target/release/credits
      - name: Zip release
        uses: vimtor/action-zip@v1
        with:
          files: target/release/assets/ target/release/credits/ target/release/${{ env.GAME_EXECUTABLE_NAME }}.exe
          dest: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
      - name: Create Installer
        if: ${{ env.BUILD_INSTALLER }}
        run: dotnet build -p:Version=1.2.3 -c Release build/windows/installer/Installer.wixproj --output installer
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.GAME_EXECUTABLE_NAME }}_windows.zip
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ env.VERSION }}_windows.zip
          tag: ${{ github.ref }}
          overwrite: true
      - name: Upload installer
        if: ${{ env.BUILD_INSTALLER }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: installer/en-US/installer.msi
          asset_name: ${{ env.GAME_EXECUTABLE_NAME }}_${{ steps.tag.outputs.tag }}_windows.msi
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true